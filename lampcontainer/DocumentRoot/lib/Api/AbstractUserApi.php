<?php

/**
 * AbstractUserApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * LampDemo
 *
 * LampDemo
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractUserApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractUserApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * GET userMinIdMaxIdGet
     * Summary: Get user between min and max id to simulate user updation for benchmark
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function userMinIdMaxIdGet(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $minId = $args['minId'];
        $maxId = $args['maxId'];
        $message = "How about implementing userMinIdMaxIdGet as a GET method in OpenAPIServer\Api\UserApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * PATCH userMinIdMaxIdPatch
     * Summary: Update user between min and max id to simulate user updation for benchmark
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function userMinIdMaxIdPatch(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $minId = $args['minId'];
        $maxId = $args['maxId'];
        $body = $request->getParsedBody();
        $message = "How about implementing userMinIdMaxIdPatch as a PATCH method in OpenAPIServer\Api\UserApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * POST userPost
     * Summary: Creates a user with random details to simulate user creation for benchmark
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function userPost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $message = "How about implementing userPost as a POST method in OpenAPIServer\Api\UserApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }
}
